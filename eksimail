#! /usr/bin/perl

package eksimail;
our $VERSION='2.33';

use warnings;
use strict;

use DateTime;
use Email::SendGrid::V3;
use File::Slurper qw/write_text/;
use Getopt::Long;
use MIME::Lite;
use WWW::Eksi 0.33;

use Encode qw/decode_utf8/;
use utf8;
binmode STDOUT, ':encoding(utf8)';

=head1 NAME

eksimail - Deliver list of eksisozluk entries

=head1 DESCRIPTION

Download, merge & deliver lists of entries from eksisozluk.com

Install C<sendmail> if you are not going to use SendGrid Web API:

    sudo apt-get install sendmail

Install C<cpanm> and C<carton>

    curl -L http://cpanmin.us | perl - App::cpanminus
    cpanm Carton

This will install dependencies into local/

    carton install

=head1 SYNOPSIS

    carton exec ./eksimail --list=daily --from=you@a.com --to=one@b.com --to=two@c.com

or

    perl -I./local/lib/perl5 ./eksimail --list=daily --from=you@a.com --to=one@b.com --to=two@c.com


=over

=item

Add C<--from> and C<--to> addresses with command line arguments. You can add more than one receivers.

=item

If you don't add a C<--from> an email won't be sent.

=item

If you want to send via SendGrid Web API, provide C<--sendgrid-api-key>. Otherwise C<sendmail> will be used.

=item

Adjust politeness delay (for web crawl) with C<--sleep>. It's set to 5 seconds by default.

=back

=head1 Arguments

=head2 list

There are two choices.

=over

=item

C<weekly>: Top 20 posts from last week, published by eksisozluk.com. Output is saved at C</tmp/{year}-{week_of_year}.html>.

=item

C<daily>: Most popular entries from yesterday, published by eksisozluk.com. Output is saved at C</tmp/{ymd}.html>.

=back

=head2 sendgrid-api-key

Provide SendGrid Web API key to use SendGrid. Otherwise C<sendmail> will be used.

=head2 sleep

Amount of seconds to sleep between each request. This is passed to C<WWW::Eksi> as politeness delay argument. Defaults to 5 if not provided.

=head2 from

Email address that email will be sent from. If it's not set, an email won't be sent.

=head2 to

Email address to send email to. This argument can be used more than once (see sample above)

=head1 LICENSE

MIT.

=cut

my @to_email;
my $from_email;
my $list;
my $politeness_delay = 5;
my $send_email       = 0;
my $sendgrid_api_key;

GetOptions(
  "to=s@"      => \@to_email,
  "from=s"     => \$from_email,
  "sleep=i"    => \$politeness_delay,
  "send-email" => \$send_email,
  "list=s"     => \$list,
  "sendgrid-api-key=s" => \$sendgrid_api_key,
);

die "Please provide --list={weekly|daily}"
  unless $list && ($list eq 'weekly' || $list eq 'daily');

my $e        = WWW::Eksi->new;
my @entries  = $list eq 'weekly'
             ? $e->ghebe($politeness_delay)
             : $e->debe($politeness_delay);

my $dow      = DateTime->now->day_of_week;
my $ymd      = DateTime->now->ymd;
my $monday   = DateTime->now->subtract(days=>($dow-1));
my $year     = $monday->year;
my $week     = $monday->week_number;
$week        = "0$week" if $week=~/^\d$/;

my $filename = $list eq 'weekly'
             ? "$year-$week"
             : "$ymd";
my $filepath = "/tmp/$filename.html";

# Start html
my $out = "<h2>eksi$list $filename</h2><br><hr>\n";
my $i   = scalar(@entries) + 1;
foreach my $entry (reverse @entries){
  $i--;
  $out .= "
  <h3>$i. <a href=\"$entry->{topic_url}\" target=\"blank\" style=\"text-decoration:none; color:black\">
  $entry->{topic_title}</a></h3><p class=\"big\" style=\"text-align:justify;\">$entry->{body_processed}
  </p><h5><div align=\"right\">
  (<a href=\"$entry->{author_url}\" target=\"blank\" style=\"text-decoration:none; color:black\">$entry->{author_name}</a>, <a href=\"$entry->{entry_url}\" target=\"blank\" style=\"text-decoration:none; color:black\">$entry->{time_as_seen}, $entry->{fav_count}&#9734;</a>)</div></h5><hr>\n";
}

$out = decode_utf8($out,1);
write_text($filepath,$out);

# Send to email subscribers.
if($from_email){
  if ($sendgrid_api_key){

    foreach my $subscriber (@to_email){
      Email::SendGrid::V3->new(api_key => $sendgrid_api_key)
        ->from($from_email)
        ->subject("eksi$list $filename")
        ->add_content('text/html', $out)
        ->add_envelope( to => [ $subscriber ] )
        ->send;
    }

  }
  else {

    foreach my $subscriber (@to_email){
      my $msg_mail = MIME::Lite->new(
        From    => $from_email,
        To      => $subscriber,
        Subject => "eksi$list $filename",
        Type    => 'multipart/mixed',
      );
      $msg_mail->attach(
        Type     => 'application/html',
        Path     => "$filepath",
        Filename => "$filename.html",
      );
      $msg_mail->send;
    }

  }
}
